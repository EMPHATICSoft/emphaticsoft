#include "DemoModule.fcl"

process_name: Demo

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "demo_hist.root" closeFileFast: false }
  TimeTracker: {}
  RandomNumberGenerator: {} #ART native random number generator
}

#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

outputs:
{
 out1:
  {
   module_type: RootOutput
   fileName:    "demo.root" #default file name, can override from command line with -o or --output
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:{}

# filters:{}

# analyzers:{}

 demonstrate: [ demo ] #list the modules for this path, order matters, filters reject all following items
 stream1:  [ out1 ] #could have multiple paths

 trigger_paths: [demonstrate] #things that modify the art::Event, filters and producers go here
 end_paths:     [stream1]  #end_path are things that do not modify art::Event, includes analyzers and output modules. all items here can be run simultaneously
}

 # Make some particles to go through the detector
 physics.producers.demo: @local::standard_demo
 
