#include "ChannelMap.fcl"

process_name: RawConvert

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "daq2root_%r_%s.root" closeFileFast: false }
#  Load the channel map service
#  ChannelMapService: @local::standard_channelmap
  
#  scheduler:    { wantSummary: true }
#  TimeTracker:  {}
#  RandomNumberGenerator: {} #ART native random number generator
#  message:      { debugModules: ["*"] destinations: { debugmsg:{type: "cout" threshold: "WARNING"} } }

#  Geometry:     @local::standard_geo
#  IFDH:         { IFDH_BASE_URI:  "http://samweb.fnal.gov:8480/sam/nova/api"}
#  Detector:     @local::standard_detector
}

#Start each new event with an empty event.
source:
{
  module_type:               RawDataUnpacker
  fileNames:                 ["/emph/data/data/Jan2022/emdaq_otsdaq_rootOutput_r430_s1_20220131T232556_1.art"]
  daqLabel:        "daq"
  createArtEvents:   true
  makeTDiffHistos:   true
  numWaveFormPlots:  100
  timeWindow: 50000
  nEvents: 0
  verbosity: 0
  channelMapFileName: "ChannelMap_Mar23.txt"
  SSDFilePrefix: "/emph/data/data/June2022/SSD/Merged/"
  readSSDData: false
  readTRB3Data: true
  readCAENData: true
  firstSubRunHasExtraTrigger: true
}

outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "emphdata_r%r_s%s.root" #default file name, can override from command line with -o or --output
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  stream1:  [ out1 ]

  end_paths:     [stream1]  #end_path are things that do not modify art::Event, includes analyzers and output modules. all items here can be run simultaneously
}
