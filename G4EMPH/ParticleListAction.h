////////////////////////////////////////////////////////////////////////
/// \brief Use Geant4's user "hooks" to maintain a list of particles generated by Geant4.
///
/// \author  seligman@nevis.columbia.edu
////////////////////////////////////////////////////////////////////////

/// This class implements the G4Base::UserAction interface in order to
/// accumulate a list of particles modeled by Geant4.

#ifndef G4EMPH_ParticleListAction_h
#define G4EMPH_ParticleListAction_h

#include "G4Base/UserAction.h"
#include "Geometry/service/GeometryService.h"

#include "Geant4/globals.hh"

#include "art/Framework/Services/Registry/ServiceHandle.h"

#include <map>

// Forward declarations.
class G4Event;
class G4Track;
class G4Step;
namespace sim { 
  class Particle;
  class ParticleNavigator; 
}

/// EMPHATIC-specific Geant4 interface
namespace emph {

  // accumulate a list of particles modeled in G4
  class ParticleListAction : public g4b::UserAction {
    
  public:
    // Standard constructors and destructors;
    ParticleListAction(double energythresh=0.0, bool manyParticles=false);
    virtual ~ParticleListAction();
    
    void Config(fhicl::ParameterSet const& pset);
    void PrintConfig(std::string const& opt);
    void ResetAbortFlag() { fIsAborted = false; };
    bool IsAborted() { return fIsAborted; };

    // UserActions method that we'll override, to obtain access to
    // Geant4's particle tracks and trajectories.
    void           BeginOfEventAction(const G4Event*);
    void           EndOfEventAction  (const G4Event*);
    void           PreTrackingAction (const G4Track*);
    void           PostTrackingAction(const G4Track*);
    void           SteppingAction    (const G4Step* );

    // TrackID of the current particle, EveID if the particle is from an EM shower.
    static int  GetCurrentTrackID ()             { return fCurrentTrackID;  }
    void              ResetTrackIDOffset(int offset=0) { fTrackIDOffset = offset; }
    
    // Returns the Particle list accumulated during the current event.
    std::vector<sim::Particle> GetList()                  const;
    std::map<int, size_t>      TrackIDToMCTruthIndexMap() const;

  private:
    int                   GetParentage(int trackid) const;

  private:
    art::ServiceHandle<emph::geo::GeometryService> geom;

    bool                    fIsAborted;             ///< Whether Geant4 was aborted while tracking a particle

    G4double                fEnergyCut;             ///< The minimum energy for a particle to be traced.  Shared by other module 
    bool                    fManyParticles;         ///< When true, includes track ids from processes like compt and brem

    static sim::Particle*   fParticle;              ///< The particle and trajectory information
                                                    ///< for a single particle.
    sim::ParticleNavigator* fParticleNav;           ///< The accumulated particle trajectory  
                                                    ///< information for all particles in the event.
    std::map<int, int>      fParentIDMap;           ///< key is current track ID, value is parent ID
    std::map<int, size_t>   fTrackIDToMCTruthIndex; ///< map track ID to index of MCTruth in input list
    static int              fCurrentTrackID;        ///< track ID of the current particle, 
                                                    ///< set to eve ID 
    static int              fTrackIDOffset;         ///< offset added to track ids when running over

  };

} // namespace g4n

#endif // G4EMPH_ParticleListAction_h
