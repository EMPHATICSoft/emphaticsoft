////////////////////////////////////////////////////////////////////////
// Class:       DAQHeaderAna
// Module Type: analyzer
// File:        DAQHeaderAna_module.cc
//
// Generated at Mon Feb 23 09:39:46 2015 by Jan Zirnstein using artmod
// from cetpkgsupport v1_07_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art_root_io/TFileService.h"

#include "TH1.h"
#include "TTimeStamp.h"

#include <iostream>
#include "RawData/DAQHeader.h"

namespace novaddt {
  class DAQHeaderAna;
}

class novaddt::DAQHeaderAna : public art::EDAnalyzer {
public:
  explicit DAQHeaderAna(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  DAQHeaderAna(DAQHeaderAna const &) = delete;
  DAQHeaderAna(DAQHeaderAna &&) = delete;
  DAQHeaderAna & operator = (DAQHeaderAna const &) = delete;
  DAQHeaderAna & operator = (DAQHeaderAna &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Optional functions
  void beginJob() override;

private:

  // Declare member data here.
  std::string _daqHeaderLabel;
  TH1I* _nMicroSlices;
  unsigned int _nDCMs;
  unsigned int _nTargetSlices;

};


novaddt::DAQHeaderAna::DAQHeaderAna(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)
  ,_daqHeaderLabel(p.get< std::string >("InputLabel"))
  ,_nDCMs(p.get< unsigned int >("NDCMs"))
  ,_nTargetSlices(p.get< unsigned int >("ExpectedSlices"))
 // More initializers here.
{}

void novaddt::DAQHeaderAna::beginJob()
{
  // Figure out max of hist axis
  unsigned int xmax = _nDCMs*(_nTargetSlices+1) + 10;
  art::ServiceHandle<art::TFileService> tfs;
  _nMicroSlices= tfs->make<TH1I>("nMicroSlices","Number of Microslices;Microslices;Events",xmax,0,xmax);
}
void novaddt::DAQHeaderAna::analyze(art::Event const & e)
{
  // Implementation of required member function here.
  // Get the DAQHeader
  art::Handle< rawdata::DAQHeader > DAQHeader;
  e.getByLabel(_daqHeaderLabel, DAQHeader);

  // Fill the histogram
  const int NumMicroSlices = DAQHeader->TotalMicroSlices();
  _nMicroSlices->Fill(NumMicroSlices);

  // TimeStamp gymnastics stolen from HeaderDrawer.cxx from the EventDisplay package
  // Unpack time and date information
  unsigned int year, month, day;
  unsigned int hour, minute, second;
  int          nano;

  unsigned long long int tsval = e.time().value();
  const unsigned long int mask32 = 0xFFFFFFFFUL;
  unsigned long int lup = ( tsval >> 32 ) & mask32;
  unsigned long int llo = tsval & mask32;
  TTimeStamp ts(lup, (int)llo);
  
  ts.GetDate(kTRUE,0,&year,&month,&day);
  ts.GetTime(kTRUE,0,&hour,&minute,&second);
  nano = ts.GetNanoSec();
  char timebuff[256];
  sprintf(timebuff, "%.2d:%.2d:%2.9f", hour, minute, (float)second+(float)nano/1.0E9);
  std::string time = timebuff;

  // Pring information for missing microslices when 2 were expected per DCM
  int minslices = _nDCMs*_nTargetSlices;
  int maxslices = _nDCMs*(_nTargetSlices+1);
  bool missingMicro = (NumMicroSlices < minslices ) || 
		      (NumMicroSlices > minslices && NumMicroSlices < maxslices);
  if(missingMicro){
    std::cout<<"There are missing microslices in this event:\n";
    std::cout<<"Run: " << e.run() << std::endl;
    std::cout<<"SubRun: " << e.subRun() << std::endl;
    std::cout<<"Event: " << e.event() << std::endl;
    std::cout<<"Microslices: " << NumMicroSlices << std::endl;
    std::cout<<"Status: " << DAQHeader->Status() << std::endl;
    std::cout<<"Time: " << time << std::endl;
  }

}

DEFINE_ART_MODULE(novaddt::DAQHeaderAna)
